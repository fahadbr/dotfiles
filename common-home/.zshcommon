# vim:foldmethod=marker

# {{{ Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
# }}}

# {{{ antidote install and load
ANTIDOTE_HOME=${ZDOTDIR:-$HOME}/.antidote
if [[ ! -d ${ANTIDOTE_HOME} ]]; then
  echo "installing antidote zsh plugin manager"
  git clone --depth=1 https://github.com/mattmc3/antidote.git ${ANTIDOTE_HOME}
fi

# Lazy-load antidote and generate the static load file only when needed
zsh_plugins=${ZDOTDIR:-$HOME}/.zsh_plugins

# Ensure the .zsh_plugins.txt file exists so you can add plugins.
[[ -f ${zsh_plugins}.txt ]] || touch ${zsh_plugins}.txt

# Lazy-load antidote from its functions directory.
fpath=(${ANTIDOTE_HOME}/functions $fpath)
autoload -Uz antidote
if [[ ! ${zsh_plugins}.zsh -nt ${zsh_plugins}.txt ]]; then
  (
    antidote bundle <${zsh_plugins}.txt >${zsh_plugins}.zsh
  )
fi
source ${zsh_plugins}.zsh

# }}}

# {{{ oh-my-zsh variables and config
#export ZSH=${ZSH:-"$HOME/.oh-my-zsh"}
#export ZSH_THEME="fahad"
#export DISABLE_AUTO_UPDATE="false"
#export DISABLE_UNTRACKED_FILES_DIRTY="true"

#plugins=(
  #git
  #ssh-agent
  #z
  #zsh-interactive-cd
  #zsh-autosuggestions
  #zsh-syntax-highlighting
#)

#if [[ -f ~/.ssh/id_rsa ]]; then
  #zstyle :omz:plugins:ssh-agent identities id_rsa
#fi

#source $ZSH/oh-my-zsh.sh
# }}}

# {{{ zsh builtin options
setopt extendedglob
setopt nomatch
setopt notify
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt incappendhistory
setopt shwordsplit
setopt completeinword
unsetopt beep
unsetopt sharehistory
bindkey -e
# }}}

# {{{ directories
setopt auto_cd              # if the commands name is not a command but a directory, change to the directory
setopt auto_pushd           # Push the current directory visited on the stack.
setopt pushd_ignore_dups    # Do not store duplicates in the stack.
setopt pushd_silent         # Do not print the directory stack after pushd or popd.
setopt pushd_minus          # Exchanges the meanings of `+' and `-' when used with a number to specify a directory in the stack.

for index ({1..9}) alias "$index"="cd +${index}"; unset index
alias d='dirs -v'
alias -- -='cd -'
alias -g ...='cd ../..'
alias -g ....='cd ../../..'
alias -g .....='cd ../../..'
alias -g ......='cd ../../../..'

alias l='ls -lah'
alias ll='ls -lh'
alias la='ls -lAh'
# }}}

export EDITOR=${EDITOR:=vim}
if which nvim &>/dev/null; then
  export EDITOR=nvim
fi
export LESS="-RF"
export MACHINE=${MACHINE:-"home"}
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_AUTOSUGGEST_MANUAL_REBIND=1
export HISTSIZE=130000
export SAVEHIST=130001
export PATH="$HOME/.local/bin:$PATH"
export LC_COLLATE="C"
export PAGER="less $LESS"

# allows previewing long shell history lines by pressing '?' in fzf
export FZF_CTRL_R_OPTS="--height 50% --preview 'echo {2..}' --preview-window 'up,60%,hidden,wrap' --bind '?:toggle-preview'"
export FZF_CTRL_T_COMMAND="command find -L . -mindepth 1 \\( -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | cut -b3-"
 export FZF_ALT_C_COMMAND="command find -L . -mindepth 1 \\( -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
          -o -type d -print 2> /dev/null | cut -b3-"

alias ls='ls -lrth --color=auto'
alias reapplyprofile='exec zsh'
alias editprofile="$EDITOR $HOME/.zshrc && exec zsh"
alias editzshcommon="$EDITOR $HOME/.zshcommon && exec zsh"
alias editssh="$EDITOR $HOME/.ssh/config"
alias view="$EDITOR -R"
alias lg='lazygit'
alias printpath='echo $PATH | sed "s/:/\n/g"'

if uname | grep -q "Linux"; then
  export MOZ_USE_XINPUT2=1
  alias grep='grep --color=auto'
  alias udc='udisksctl'
  alias open="xdg-open"
  alias cpr='rsync -ah --info=progress2'
  alias cp='cp --backup=numbered'
  alias ln='ln --backup=numbered'
  alias mv='mv -f --backup=numbered'
  alias rrm='/bin/rm' # "real rm"
  alias sdu='systemctl --user'
  alias sd='systemctl'
  alias susd='sudo systemctl'
  if [[ $WAYLAND_DISPLAY ]]; then
    alias pbcopy='wl-copy'
    alias pbpaste='wl-paste'
  else
    alias pbcopy='xclip -i -sel clip'
    alias pbpaste='xclip -o -sel clip'
  fi

  if which trash-put &>/dev/null; then
    alias rm='trash-put -v'
    alias tp='trash-put'
    export NNN_TRASH=1
  fi
fi

# {{{ nnn config
export NNN_PLUG='p:preview-tui;z:autojump;f:fzcd;l:!less -R $nnn;b:!bat $nnn'
export NNN_FIFO='/tmp/nnn.fifo'
export NNN_OPENER="$HOME/.config/nnn/plugins/nuke"
export NNN_TRASH=0
function n () # {{{
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, either remove the "export" as in:
    #    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    #    (or, to a custom path: NNN_TMPFILE=/tmp/.lastd)
    # or, export NNN_TMPFILE after nnn invocation
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    LESS="-R" nnn -T t -c -d -U -A "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rrm -f "$NNN_TMPFILE" > /dev/null
    fi
}
# }}}
# }}}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# this function is to be called at the end of the
# os specific .zshrc
# the main reason for which is because some binaries
# may exist on different paths which are set up on the machine specific
# zshrc files
post_path_evals() {
  eval "$(zoxide init zsh)"
  unset post_path_evals
}
